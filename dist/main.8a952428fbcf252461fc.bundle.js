(self.webpackChunk=self.webpackChunk||[]).push([[179],{9665:(t,l,e)=>{"use strict";e.r(l),e.d(l,{backgrounds:()=>p,default:()=>N,fragmentSteps:()=>i,fusumaProps:()=>k,slides:()=>u});var a=e(4529),n=e(3077);e(2661);function r(){return r=Object.assign||function(t){for(var l=1;l<arguments.length;l++){var e=arguments[l];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t},r.apply(this,arguments)}const u=[t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h1",null,"モダン Web フロントエンド入門")),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"自己紹介"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"自己紹介する"))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"スライド・課題の目的"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"スライド: 現代 Web フロントエンドを取り巻く状況をシェアし、これから作るもののイメージを作る"),(0,n.kt)("li",{parentName:"ul"},"課題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"HTML/CSS/JavaScript/TypeScript を使った簡単な React.js アプリケーションを作り、現代 Web フロントエンド開発がどのように進むかを体験する"),(0,n.kt)("li",{parentName:"ul"},"技術書/Udemy などの講座を通して、Web フロントエンド開発を自習できる状態を目指す"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"スライド・課題でやらないことの説明"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"HTML/CSS/JavaScript/TypeScript の入門")),(0,n.kt)("h2",null,"Web フロントエンドって？"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"どんな領域の開発？"),(0,n.kt)("li",{parentName:"ul"},"どんな技術を使っている？",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"HTML"),(0,n.kt)("li",{parentName:"ul"},"JavaScript"),(0,n.kt)("li",{parentName:"ul"},"CSS"))),(0,n.kt)("li",{parentName:"ul"},"講師は何が得意なフロントエンドエンジニア？")))],p=[0,0,0,0],i=[0,0,0,0],k=[{},{},{},{}],m={};function N(t){let{components:l,...e}=t;return(0,n.kt)("wrapper",r({},m,e,{components:l,mdxType:"MDXLayout"}),(0,n.kt)("h1",null,"モダン Web フロントエンド入門"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"自己紹介"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"自己紹介する")),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"スライド・課題の目的"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"スライド: 現代 Web フロントエンドを取り巻く状況をシェアし、これから作るもののイメージを作る"),(0,n.kt)("li",{parentName:"ul"},"課題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"HTML/CSS/JavaScript/TypeScript を使った簡単な React.js アプリケーションを作り、現代 Web フロントエンド開発がどのように進むかを体験する"),(0,n.kt)("li",{parentName:"ul"},"技術書/Udemy などの講座を通して、Web フロントエンド開発を自習できる状態を目指す")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"スライド・課題でやらないことの説明"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"HTML/CSS/JavaScript/TypeScript の入門")),(0,n.kt)("h2",null,"Web フロントエンドって？"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"どんな領域の開発？"),(0,n.kt)("li",{parentName:"ul"},"どんな技術を使っている？",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"HTML"),(0,n.kt)("li",{parentName:"ul"},"JavaScript"),(0,n.kt)("li",{parentName:"ul"},"CSS"))),(0,n.kt)("li",{parentName:"ul"},"講師は何が得意なフロントエンドエンジニア？")))}N.isMDXComponent=!0},6668:(t,l,e)=>{"use strict";e.r(l),e.d(l,{backgrounds:()=>p,default:()=>N,fragmentSteps:()=>i,fusumaProps:()=>k,slides:()=>u});var a=e(4529),n=e(3077);e(2661);function r(){return r=Object.assign||function(t){for(var l=1;l<arguments.length;l++){var e=arguments[l];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t},r.apply(this,arguments)}const u=[t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h1",null,"JavaScript の module の変遷")),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"TL;DR"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"色々な変遷があったよ"),(0,n.kt)("li",{parentName:"ul"},"現代では、",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ES6 Module (import/export) と Node.js の commonJS 形式 (require/export) がよく使われているよ"),(0,n.kt)("li",{parentName:"ul"},"Webpack という module bundler がよく使われているよ"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"最初期"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"元々は script tag を HTML にたくさん書いて大量の JS を読み込んでいた",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"プロトコル的に一度に読み込めるファイルの数に限度がある"),(0,n.kt)("li",{parentName:"ul"},"全て同じ名前空間"),(0,n.kt)("li",{parentName:"ul"},"a.js と b.js に同じ名前の変数定義があると読み込む順番によって上書きされてしまう"),(0,n.kt)("li",{parentName:"ul"},"ファイル間の依存関係順にスクリプトタグを記述しないといけない"),(0,n.kt)("li",{parentName:"ul"},"再利用性が低い"))))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"IIFE パターン"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"関数の中は scope がある"),(0,n.kt)("li",{parentName:"ul"},"擬似的に private な空間として利用"),(0,n.kt)("li",{parentName:"ul"},"関数の名前が衝突するのを防げる"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"dead code の検出はできない"),(0,n.kt)("li",{parentName:"ul"},"遅い・重い"),(0,n.kt)("li",{parentName:"ul"},"JavaScript の言語仕様ではない Hack"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"Node.js の誕生"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"サーバーサイド JavaScript"),(0,n.kt)("li",{parentName:"ul"},"ブラウザ以外の初の JavaScript の実行環境"),(0,n.kt)("li",{parentName:"ul"},"commonJS という require/export を使った module の仕組みを実現！"),(0,n.kt)("li",{parentName:"ul"},"npm の誕生"),(0,n.kt)("li",{parentName:"ul"},"問題：",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"commonJS は Node.js 独自の記法だったため、ブラウザの JavaScript では動かない！"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"Bundler の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Node.js のコードをブラウザで実行可能なものに変換する"),(0,n.kt)("li",{parentName:"ul"},"Browserify など"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"bundle された file は読み込みに時間のかかる単一な巨大なファイル"),(0,n.kt)("li",{parentName:"ul"},"少しコードを修正しただけでも、プロジェクト内の全ての JS を bundle し直す必要があった"),(0,n.kt)("li",{parentName:"ul"},"全ての module が commonJS 形式で書かれていたわけではなかった",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"IIFE"),(0,n.kt)("li",{parentName:"ul"},"AMD 形式"),(0,n.kt)("li",{parentName:"ul"},"他にも色々"))))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"ECMAScript 6 Module"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"ECMAScript はブラウザベンダー各社でバラバラだった JavaScript の振る舞い・仕様を標準化するための基本仕様"),(0,n.kt)("li",{parentName:"ul"},"ECMAScript 6 (ES6 / ES2015 とも呼ばれる) で現代の JavaScript の基本となる文法の多くの仕様が策定された"),(0,n.kt)("li",{parentName:"ul"},"以降、毎年 ES2016 / ES2017 のような形で、1 年に 1 度仕様の更新を行っている"),(0,n.kt)("li",{parentName:"ul"},"ES6 には Module と呼ばれる import / export を使った module の定義が含まれていた"),(0,n.kt)("li",{parentName:"ul"},"ついにブラウザで動く module の仕組みが実現"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"今まで commonJS 形式で実装されてきた Node.js の資産はどうなる？"),(0,n.kt)("li",{parentName:"ul"},"ブラウザで動く import/export の依存解決はとても遅い"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"Webpack の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"どの環境で実行するか、を指定して bundle できる (ブラウザ向けか、commonJS 向けかなど)"),(0,n.kt)("li",{parentName:"ul"},"chunk と呼ばれる単位で bundle を分割できるため、script の読み込みにかかる時間を軽減できる"),(0,n.kt)("li",{parentName:"ul"},"例: トップページで使う JS の chunk / マイページで使う JS の chunk"),(0,n.kt)("li",{parentName:"ul"},"画像 / CSS なども module として解決できる"),(0,n.kt)("li",{parentName:"ul"},"JavaScript の中で CSS/画像を import して利用"),(0,n.kt)("li",{parentName:"ul"},"plugin で挙動を hack できる"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Webpack の config が複雑になりすぎる"),(0,n.kt)("li",{parentName:"ul"},"Webpack 職人、という meme"),(0,n.kt)("li",{parentName:"ul"},"職人の心のこもった webpack.config.js"),(0,n.kt)("li",{parentName:"ul"},"webpack の config の属人化、そして誰も読めなくなる"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"最近の bundler 周りの動き"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"複雑な Webpack の config を書かなくとも、zero config で実行環境を作れるようにする動き",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"React.js だと create-react-app / Next.js など"))),(0,n.kt)("li",{parentName:"ul"},"build の時間を短縮したい",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"🤔 bundler は JavaScript で実装されていなくても良いのでは？"),(0,n.kt)("li",{parentName:"ul"},"rust / go 製の build tool の登場"),(0,n.kt)("li",{parentName:"ul"},"例: esbuild / swc")))))],p=[0,0,0,0,0,0,0,0,0],i=[0,0,0,0,0,0,0,0,0],k=[{},{},{},{},{},{},{},{},{}],m={};function N(t){let{components:l,...e}=t;return(0,n.kt)("wrapper",r({},m,e,{components:l,mdxType:"MDXLayout"}),(0,n.kt)("h1",null,"JavaScript の module の変遷"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"TL;DR"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"色々な変遷があったよ"),(0,n.kt)("li",{parentName:"ul"},"現代では、",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ES6 Module (import/export) と Node.js の commonJS 形式 (require/export) がよく使われているよ"),(0,n.kt)("li",{parentName:"ul"},"Webpack という module bundler がよく使われているよ")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"最初期"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"元々は script tag を HTML にたくさん書いて大量の JS を読み込んでいた",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"プロトコル的に一度に読み込めるファイルの数に限度がある"),(0,n.kt)("li",{parentName:"ul"},"全て同じ名前空間"),(0,n.kt)("li",{parentName:"ul"},"a.js と b.js に同じ名前の変数定義があると読み込む順番によって上書きされてしまう"),(0,n.kt)("li",{parentName:"ul"},"ファイル間の依存関係順にスクリプトタグを記述しないといけない"),(0,n.kt)("li",{parentName:"ul"},"再利用性が低い")))))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"IIFE パターン"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"関数の中は scope がある"),(0,n.kt)("li",{parentName:"ul"},"擬似的に private な空間として利用"),(0,n.kt)("li",{parentName:"ul"},"関数の名前が衝突するのを防げる"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"dead code の検出はできない"),(0,n.kt)("li",{parentName:"ul"},"遅い・重い"),(0,n.kt)("li",{parentName:"ul"},"JavaScript の言語仕様ではない Hack")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"Node.js の誕生"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"サーバーサイド JavaScript"),(0,n.kt)("li",{parentName:"ul"},"ブラウザ以外の初の JavaScript の実行環境"),(0,n.kt)("li",{parentName:"ul"},"commonJS という require/export を使った module の仕組みを実現！"),(0,n.kt)("li",{parentName:"ul"},"npm の誕生"),(0,n.kt)("li",{parentName:"ul"},"問題：",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"commonJS は Node.js 独自の記法だったため、ブラウザの JavaScript では動かない！")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"Bundler の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Node.js のコードをブラウザで実行可能なものに変換する"),(0,n.kt)("li",{parentName:"ul"},"Browserify など"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"bundle された file は読み込みに時間のかかる単一な巨大なファイル"),(0,n.kt)("li",{parentName:"ul"},"少しコードを修正しただけでも、プロジェクト内の全ての JS を bundle し直す必要があった"),(0,n.kt)("li",{parentName:"ul"},"全ての module が commonJS 形式で書かれていたわけではなかった",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"IIFE"),(0,n.kt)("li",{parentName:"ul"},"AMD 形式"),(0,n.kt)("li",{parentName:"ul"},"他にも色々")))))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"ECMAScript 6 Module"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"ECMAScript はブラウザベンダー各社でバラバラだった JavaScript の振る舞い・仕様を標準化するための基本仕様"),(0,n.kt)("li",{parentName:"ul"},"ECMAScript 6 (ES6 / ES2015 とも呼ばれる) で現代の JavaScript の基本となる文法の多くの仕様が策定された"),(0,n.kt)("li",{parentName:"ul"},"以降、毎年 ES2016 / ES2017 のような形で、1 年に 1 度仕様の更新を行っている"),(0,n.kt)("li",{parentName:"ul"},"ES6 には Module と呼ばれる import / export を使った module の定義が含まれていた"),(0,n.kt)("li",{parentName:"ul"},"ついにブラウザで動く module の仕組みが実現"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"今まで commonJS 形式で実装されてきた Node.js の資産はどうなる？"),(0,n.kt)("li",{parentName:"ul"},"ブラウザで動く import/export の依存解決はとても遅い")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"Webpack の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"どの環境で実行するか、を指定して bundle できる (ブラウザ向けか、commonJS 向けかなど)"),(0,n.kt)("li",{parentName:"ul"},"chunk と呼ばれる単位で bundle を分割できるため、script の読み込みにかかる時間を軽減できる"),(0,n.kt)("li",{parentName:"ul"},"例: トップページで使う JS の chunk / マイページで使う JS の chunk"),(0,n.kt)("li",{parentName:"ul"},"画像 / CSS なども module として解決できる"),(0,n.kt)("li",{parentName:"ul"},"JavaScript の中で CSS/画像を import して利用"),(0,n.kt)("li",{parentName:"ul"},"plugin で挙動を hack できる"),(0,n.kt)("li",{parentName:"ul"},"問題:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Webpack の config が複雑になりすぎる"),(0,n.kt)("li",{parentName:"ul"},"Webpack 職人、という meme"),(0,n.kt)("li",{parentName:"ul"},"職人の心のこもった webpack.config.js"),(0,n.kt)("li",{parentName:"ul"},"webpack の config の属人化、そして誰も読めなくなる")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"最近の bundler 周りの動き"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"複雑な Webpack の config を書かなくとも、zero config で実行環境を作れるようにする動き",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"React.js だと create-react-app / Next.js など"))),(0,n.kt)("li",{parentName:"ul"},"build の時間を短縮したい",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"🤔 bundler は JavaScript で実装されていなくても良いのでは？"),(0,n.kt)("li",{parentName:"ul"},"rust / go 製の build tool の登場"),(0,n.kt)("li",{parentName:"ul"},"例: esbuild / swc")))))}N.isMDXComponent=!0},3047:(t,l,e)=>{"use strict";e.r(l),e.d(l,{backgrounds:()=>p,default:()=>N,fragmentSteps:()=>i,fusumaProps:()=>k,slides:()=>u});var a=e(4529),n=e(3077);e(2661);function r(){return r=Object.assign||function(t){for(var l=1;l<arguments.length;l++){var e=arguments[l];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t},r.apply(this,arguments)}const u=[t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h1",null,"フロントエンドライブラリの変遷")),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"jQuery の天下"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"jQuery が広く使われていた"),(0,n.kt)("li",{parentName:"ul"},"(TODO リストのコード例)"),(0,n.kt)("li",{parentName:"ul"},"JavaScript にはない便利な文法があった"),(0,n.kt)("li",{parentName:"ul"},"ブラウザ間の JavaScript 実装の差分を jQuery で吸収できた"))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"どんどんリッチになる Web フロントエンドの UI"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"jQuery で表現するのが辛くなってきた",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Web フロントエンド専用のライブラリ、というわけではないので、実装の方針・設計などはエンジニアに委ねられる"),(0,n.kt)("li",{parentName:"ul"},"現場によって実装方針がバラバラ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"jQuery にオレオレ便利関数を足して使う"),(0,n.kt)("li",{parentName:"ul"},"jQuery のバージョンがまちまち"))),(0,n.kt)("li",{parentName:"ul"},"UI の部品（コンポーネント）の再利用性",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ユーザーの見た目上は同じ部品でも、繰り返し似たような記述を、HTML/CSS/JavaScript で繰り返し書かないといけなかった"),(0,n.kt)("li",{parentName:"ul"},"例: ボタン",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ボタン用の CSS を書く"),(0,n.kt)("li",{parentName:"ul"},"ボタンを表示したい箇所で、ボタンの HTML を書く"),(0,n.kt)("li",{parentName:"ul"},"ボタンを押した時に実行したい処理を JavaScript に書く"))))))),(0,n.kt)("li",{parentName:"ul"},"CSS の干渉・依存・再利用性",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JavaScript で起きていたような module の問題"),(0,n.kt)("li",{parentName:"ul"},"セレクターがぶつかってしまう"),(0,n.kt)("li",{parentName:"ul"},"依存関係・読み込み順"),(0,n.kt)("li",{parentName:"ul"},"🤔 他の CSS に影響を与えない、特定の scope に閉じた CSS がほしい..."),(0,n.kt)("li",{parentName:"ul"},"🤔 HTML/JavaScript/CSS を意味のあるまとまり毎に定義して、再利用できればよいのに..."))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"React.js (宣言的 UI) の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"JavaScript first",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JSX を返却する JavaScript の class / function"),(0,n.kt)("li",{parentName:"ul"},"元々は class component しかなかったが、後から function component が実装 && hooks API という function component に logic を書くための API が登場したことにより、現在ではほぼ全ての component を function component に書くようになっている"),(0,n.kt)("li",{parentName:"ul"},"JavaScript のロジックも HTML も同じ.jsx ファイルに書ける"))),(0,n.kt)("li",{parentName:"ul"},"CSS は scoped にする",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"例: CSS module",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Webpack の設定で CSS を JavaScript から import できるようにする"),(0,n.kt)("li",{parentName:"ul"},"Webpack (正確には Webpack の loader) が build 時に selector を component 内に閉じるような名前に自動変換"),(0,n.kt)("li",{parentName:"ul"},"component の内部にしか影響を与えない CSS 定義ができる"))))),(0,n.kt)("li",{parentName:"ul"},"例: CSS in JS",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"CSS を JavaScript 内で書いてしまおう、という考え方"),(0,n.kt)("li",{parentName:"ul"},"styled-component / emotion が有名"),(0,n.kt)("li",{parentName:"ul"},"(jQuery のコードを React で書きなおしたものを載せる)"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"現在の Web フロントエンドライブラリのメタ"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"React.js が筆頭"),(0,n.kt)("li",{parentName:"ul"},"次点で Vue.js が続く",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JSX が扱えるようになったり、React.js のような function component の記法が入ったりなど、ライブラリ同士がお互いの API に影響を与えあっている"))),(0,n.kt)("li",{parentName:"ul"},"React.js を使う場合は、React.js のフレームワークである Next.js を採用するのがデファクトになりつつある",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"開発元である Vercel の体制が安泰",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"大量の資金調達"),(0,n.kt)("li",{parentName:"ul"},"JavaScript / TypeScript の OSS 開発者を無限に採用")))))))],p=[0,0,0,0,0],i=[0,0,0,0,0],k=[{},{},{},{},{}],m={};function N(t){let{components:l,...e}=t;return(0,n.kt)("wrapper",r({},m,e,{components:l,mdxType:"MDXLayout"}),(0,n.kt)("h1",null,"フロントエンドライブラリの変遷"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"jQuery の天下"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"jQuery が広く使われていた"),(0,n.kt)("li",{parentName:"ul"},"(TODO リストのコード例)"),(0,n.kt)("li",{parentName:"ul"},"JavaScript にはない便利な文法があった"),(0,n.kt)("li",{parentName:"ul"},"ブラウザ間の JavaScript 実装の差分を jQuery で吸収できた")),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"どんどんリッチになる Web フロントエンドの UI"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"jQuery で表現するのが辛くなってきた",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Web フロントエンド専用のライブラリ、というわけではないので、実装の方針・設計などはエンジニアに委ねられる"),(0,n.kt)("li",{parentName:"ul"},"現場によって実装方針がバラバラ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"jQuery にオレオレ便利関数を足して使う"),(0,n.kt)("li",{parentName:"ul"},"jQuery のバージョンがまちまち"))),(0,n.kt)("li",{parentName:"ul"},"UI の部品（コンポーネント）の再利用性",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ユーザーの見た目上は同じ部品でも、繰り返し似たような記述を、HTML/CSS/JavaScript で繰り返し書かないといけなかった"),(0,n.kt)("li",{parentName:"ul"},"例: ボタン",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ボタン用の CSS を書く"),(0,n.kt)("li",{parentName:"ul"},"ボタンを表示したい箇所で、ボタンの HTML を書く"),(0,n.kt)("li",{parentName:"ul"},"ボタンを押した時に実行したい処理を JavaScript に書く"))))))),(0,n.kt)("li",{parentName:"ul"},"CSS の干渉・依存・再利用性",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JavaScript で起きていたような module の問題"),(0,n.kt)("li",{parentName:"ul"},"セレクターがぶつかってしまう"),(0,n.kt)("li",{parentName:"ul"},"依存関係・読み込み順"),(0,n.kt)("li",{parentName:"ul"},"🤔 他の CSS に影響を与えない、特定の scope に閉じた CSS がほしい..."),(0,n.kt)("li",{parentName:"ul"},"🤔 HTML/JavaScript/CSS を意味のあるまとまり毎に定義して、再利用できればよいのに...")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"React.js (宣言的 UI) の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"JavaScript first",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JSX を返却する JavaScript の class / function"),(0,n.kt)("li",{parentName:"ul"},"元々は class component しかなかったが、後から function component が実装 && hooks API という function component に logic を書くための API が登場したことにより、現在ではほぼ全ての component を function component に書くようになっている"),(0,n.kt)("li",{parentName:"ul"},"JavaScript のロジックも HTML も同じ.jsx ファイルに書ける"))),(0,n.kt)("li",{parentName:"ul"},"CSS は scoped にする",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"例: CSS module",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Webpack の設定で CSS を JavaScript から import できるようにする"),(0,n.kt)("li",{parentName:"ul"},"Webpack (正確には Webpack の loader) が build 時に selector を component 内に閉じるような名前に自動変換"),(0,n.kt)("li",{parentName:"ul"},"component の内部にしか影響を与えない CSS 定義ができる"))))),(0,n.kt)("li",{parentName:"ul"},"例: CSS in JS",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"CSS を JavaScript 内で書いてしまおう、という考え方"),(0,n.kt)("li",{parentName:"ul"},"styled-component / emotion が有名"),(0,n.kt)("li",{parentName:"ul"},"(jQuery のコードを React で書きなおしたものを載せる)")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"現在の Web フロントエンドライブラリのメタ"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"React.js が筆頭"),(0,n.kt)("li",{parentName:"ul"},"次点で Vue.js が続く",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JSX が扱えるようになったり、React.js のような function component の記法が入ったりなど、ライブラリ同士がお互いの API に影響を与えあっている"))),(0,n.kt)("li",{parentName:"ul"},"React.js を使う場合は、React.js のフレームワークである Next.js を採用するのがデファクトになりつつある",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"開発元である Vercel の体制が安泰",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"大量の資金調達"),(0,n.kt)("li",{parentName:"ul"},"JavaScript / TypeScript の OSS 開発者を無限に採用")))))))}N.isMDXComponent=!0},5655:(t,l,e)=>{"use strict";e.r(l),e.d(l,{backgrounds:()=>p,default:()=>N,fragmentSteps:()=>i,fusumaProps:()=>k,slides:()=>u});var a=e(4529),n=e(3077);e(2661);function r(){return r=Object.assign||function(t){for(var l=1;l<arguments.length;l++){var e=arguments[l];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t},r.apply(this,arguments)}const u=[t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h1",null,"型付けの変遷")),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"🤔 型って何？"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"string / number / boolean などの、データの種類"),(0,n.kt)("li",{parentName:"ul"},"例:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"true は boolean 型"),(0,n.kt)("li",{parentName:"ul"},"1 は number 型"))),(0,n.kt)("li",{parentName:"ul"},"動的型付け言語と静的型付け言語がある",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"動的: 変数・関数・クラスの定義時に、型を明示的に宣言しない",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Ruby/JavaScript など"))),(0,n.kt)("li",{parentName:"ul"},"静的: 変数・関数・クラスの定義時に、型を明示的に宣言しなければならない",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"C++/Go/Java など"))))),(0,n.kt)("li",{parentName:"ul"},"Web フロントエンドのリッチ化・Node.js でサーバーサイド JavaScript の考えかたが登場したことにより、JavaScript アプリケーションは大規模化・複雑化していった",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JavaScript の動的型はあまり信用できなかった",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"1 == ‘1’"),(0,n.kt)("li",{parentName:"ul"},"true = ‘1’"),(0,n.kt)("li",{parentName:"ul"},"undefined == null"))),(0,n.kt)("li",{parentName:"ul"},"🤔 既存の JavaScript のコードに少しずつ足していける、静的型つけのような型検査の仕組みがほしい...!"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"TypeScript の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"JavaScript の文法はそのままに、型を追加した JavaScript の superset"),(0,n.kt)("li",{parentName:"ul"},"build 時に JavaScript に変換する"),(0,n.kt)("li",{parentName:"ul"},"どのぐらい型の検査を厳しくするかは config で設定できる",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"0 ⇒ 1 なので厳しい config にしたり"),(0,n.kt)("li",{parentName:"ul"},"JavaScript で数年開発した project に後から TypeScript を入れるのでゆるい config にしたり"),(0,n.kt)("li",{parentName:"ul"},"(余談) React.js では、React.propTypes ⇒ flowtyped ⇒ TypeScript のように型付けのでデファクトが変化していったが、今回は割愛")))))],p=[0,0,0],i=[0,0,0],k=[{},{},{}],m={};function N(t){let{components:l,...e}=t;return(0,n.kt)("wrapper",r({},m,e,{components:l,mdxType:"MDXLayout"}),(0,n.kt)("h1",null,"型付けの変遷"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"🤔 型って何？"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"string / number / boolean などの、データの種類"),(0,n.kt)("li",{parentName:"ul"},"例:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"true は boolean 型"),(0,n.kt)("li",{parentName:"ul"},"1 は number 型"))),(0,n.kt)("li",{parentName:"ul"},"動的型付け言語と静的型付け言語がある",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"動的: 変数・関数・クラスの定義時に、型を明示的に宣言しない",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Ruby/JavaScript など"))),(0,n.kt)("li",{parentName:"ul"},"静的: 変数・関数・クラスの定義時に、型を明示的に宣言しなければならない",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"C++/Go/Java など"))))),(0,n.kt)("li",{parentName:"ul"},"Web フロントエンドのリッチ化・Node.js でサーバーサイド JavaScript の考えかたが登場したことにより、JavaScript アプリケーションは大規模化・複雑化していった",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"JavaScript の動的型はあまり信用できなかった",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"1 == ‘1’"),(0,n.kt)("li",{parentName:"ul"},"true = ‘1’"),(0,n.kt)("li",{parentName:"ul"},"undefined == null"))),(0,n.kt)("li",{parentName:"ul"},"🤔 既存の JavaScript のコードに少しずつ足していける、静的型つけのような型検査の仕組みがほしい...!")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"TypeScript の登場"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"JavaScript の文法はそのままに、型を追加した JavaScript の superset"),(0,n.kt)("li",{parentName:"ul"},"build 時に JavaScript に変換する"),(0,n.kt)("li",{parentName:"ul"},"どのぐらい型の検査を厳しくするかは config で設定できる",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"0 ⇒ 1 なので厳しい config にしたり"),(0,n.kt)("li",{parentName:"ul"},"JavaScript で数年開発した project に後から TypeScript を入れるのでゆるい config にしたり"),(0,n.kt)("li",{parentName:"ul"},"(余談) React.js では、React.propTypes ⇒ flowtyped ⇒ TypeScript のように型付けのでデファクトが変化していったが、今回は割愛")))))}N.isMDXComponent=!0},3863:(t,l,e)=>{"use strict";e.r(l),e.d(l,{backgrounds:()=>p,default:()=>N,fragmentSteps:()=>i,fusumaProps:()=>k,slides:()=>u});var a=e(4529),n=e(3077);e(2661);function r(){return r=Object.assign||function(t){for(var l=1;l<arguments.length;l++){var e=arguments[l];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t},r.apply(this,arguments)}const u=[t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h1",null,"その他 Web フロントエンド開発で標準的に用いられる仕組み"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"linter",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ソースコードを解析するツール"),(0,n.kt)("li",{parentName:"ul"},"eslint が一般的に利用される"),(0,n.kt)("li",{parentName:"ul"},"ECMAScript は 1 年に 1 度新 API を定義する && TypeScript も update 毎に新 API を追加するので、同じ実装をする場合でも、非推奨の API や、古い実装パターンを使ってしまうことがありえる"),(0,n.kt)("li",{parentName:"ul"},"避けるべき記法に error / warning を出すことで、コードレビューで人間が同じ内容を指摘しないで済む && 非推奨の記法を検出することでソースコードの品質を一定に保つ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"例:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"使用されていない変数・関数を定義していないか"),(0,n.kt)("li",{parentName:"ul"},"const で定義できる箇所で let / var を使っていないか"))))))),(0,n.kt)("li",{parentName:"ul"},"formatter",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"コードの改行・不要なスペースの除去・「,」「;」の付与など、コードの整形を自動で行ってくれるツール"),(0,n.kt)("li",{parentName:"ul"},"prettier が一般的に利用される"),(0,n.kt)("li",{parentName:"ul"},"「JavaScript 的にはどちらでも正しいが、チームとして特定の記法のみを利用する方針としたい」などといった場合に、formatter にコードを自動整形させ format を強制できる"))))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"まとめ"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"色々あって複雑になっている"),(0,n.kt)("li",{parentName:"ul"},"一気に全領域キャッチアップするのは難しいので、全体を薄く触って、少しずつ各領域の知識をつけていく"))),t=>(0,n.kt)(a.Fragment,null,(0,n.kt)("h2",null,"課題の共有"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/queq1890/fe-new-grad-training"},"https://github.com/queq1890/fe-new-grad-training"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"広く薄く触るためのチュートリアル、完了後も多くの分からないことが残ると思う旨をしゃべる"),(0,n.kt)("li",{parentName:"ul"},"チュートリアル完了後の学習リソースについて"))),(0,n.kt)("li",{parentName:"ul"},"実装をしたリポジトリの URL を moodle に提出")))],p=[0,0,0],i=[0,0,0],k=[{},{},{}],m={};function N(t){let{components:l,...e}=t;return(0,n.kt)("wrapper",r({},m,e,{components:l,mdxType:"MDXLayout"}),(0,n.kt)("h1",null,"その他 Web フロントエンド開発で標準的に用いられる仕組み"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"linter",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"ソースコードを解析するツール"),(0,n.kt)("li",{parentName:"ul"},"eslint が一般的に利用される"),(0,n.kt)("li",{parentName:"ul"},"ECMAScript は 1 年に 1 度新 API を定義する && TypeScript も update 毎に新 API を追加するので、同じ実装をする場合でも、非推奨の API や、古い実装パターンを使ってしまうことがありえる"),(0,n.kt)("li",{parentName:"ul"},"避けるべき記法に error / warning を出すことで、コードレビューで人間が同じ内容を指摘しないで済む && 非推奨の記法を検出することでソースコードの品質を一定に保つ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"例:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"使用されていない変数・関数を定義していないか"),(0,n.kt)("li",{parentName:"ul"},"const で定義できる箇所で let / var を使っていないか"))))))),(0,n.kt)("li",{parentName:"ul"},"formatter",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"コードの改行・不要なスペースの除去・「,」「;」の付与など、コードの整形を自動で行ってくれるツール"),(0,n.kt)("li",{parentName:"ul"},"prettier が一般的に利用される"),(0,n.kt)("li",{parentName:"ul"},"「JavaScript 的にはどちらでも正しいが、チームとして特定の記法のみを利用する方針としたい」などといった場合に、formatter にコードを自動整形させ format を強制できる")))),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"まとめ"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"色々あって複雑になっている"),(0,n.kt)("li",{parentName:"ul"},"一気に全領域キャッチアップするのは難しいので、全体を薄く触って、少しずつ各領域の知識をつけていく")),(0,n.kt)("hr",null),(0,n.kt)("h2",null,"課題の共有"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/queq1890/fe-new-grad-training"},"https://github.com/queq1890/fe-new-grad-training"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"広く薄く触るためのチュートリアル、完了後も多くの分からないことが残ると思う旨をしゃべる"),(0,n.kt)("li",{parentName:"ul"},"チュートリアル完了後の学習リソースについて"))),(0,n.kt)("li",{parentName:"ul"},"実装をしたリポジトリの URL を moodle に提出")))}N.isMDXComponent=!0},539:(t,l,e)=>{"use strict";e.r(l)},3447:(t,l,e)=>{var a={"./0-hi.md":9665,"./1-module.md":6668,"./2-library.md":3047,"./3-typing.md":5655,"./4-nitpick.md":3863};function n(t){var l=r(t);return e(l)}function r(t){if(!e.o(a,t)){var l=new Error("Cannot find module '"+t+"'");throw l.code="MODULE_NOT_FOUND",l}return a[t]}n.keys=function(){return Object.keys(a)},n.resolve=r,t.exports=n,n.id=3447}},t=>{t.O(0,[179],(()=>{[160,660,81].map(t.E)}),5);var l=l=>t(t.s=l);t.O(0,[736],(()=>(l(757),l(5542),l(6006))));t.O()}]);